import React, { useCallback, useMemo, useState } from 'react';
import { useDropzone } from 'react-dropzone';

const BYTES_IN_MB = 1024 * 1024;

const NewCheckModal = ({ isOpen, onClose, onUploaded }) => {
  const [projectName, setProjectName] = useState('');
  const [files, setFiles] = useState([]);
  const [uploading, setUploading] = useState(false);
  const [errors, setErrors] = useState([]);

  const onDrop = useCallback((acceptedFiles, rejectedFiles) => {
    if (rejectedFiles?.length) {
      const msgs = rejectedFiles.map(r => r.errors?.map(e => e.message).join(', ')).filter(Boolean);
      setErrors(prev => [...prev, ...msgs]);
    }
    if (acceptedFiles?.length) {
      setFiles(prev => [...prev, ...acceptedFiles]);
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    multiple: true,
    accept: { 'application/pdf': ['.pdf'] },
    maxSize: 50 * BYTES_IN_MB,
  });

  const removeFile = useCallback((name) => {
    setFiles(prev => prev.filter(f => f.name !== name));
  }, []);

  const totalSizeMB = useMemo(() => {
    const total = files.reduce((s, f) => s + f.size, 0);
    return (total / BYTES_IN_MB).toFixed(2);
  }, [files]);

  const startUpload = async () => {
    if (!files.length) return;
    setUploading(true);
    setErrors([]);
    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3001';

    try {
      for (const file of files) {
        const formData = new FormData();
        formData.append('pdf', file);
        const res = await fetch(`${apiUrl}/upload`, { method: 'POST', body: formData });
        if (!res.ok) {
          const text = await res.text();
          throw new Error(`Upload failed (${res.status}) ${text}`);
        }
      }
      setFiles([]);
      onUploaded?.('–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      onClose?.();
    } catch (e) {
      setErrors(prev => [...prev, e.message]);
    } finally {
      setUploading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-backdrop">
      <div className="modal">
        <div className="modal-header">
          <h2>–ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</h2>
          <button className="icon-button" onClick={onClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å">‚úï</button>
        </div>
        <div className="modal-body">
          <div className="left">
            <label className="field">
              <span>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</span>
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                value={projectName}
                onChange={(e) => setProjectName(e.target.value)}
              />
            </label>

            <div {...getRootProps({ className: `dropzone ${isDragActive ? 'active' : ''}` })}>
              <input {...getInputProps()} />
              <p><strong>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ</strong></p>
              <p className="muted">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: PDF</p>
            </div>

            {!!files.length && (
              <div className="files-list">
                <div className="files-list-header">{files.length} –¥–æ–∫—É–º–µ–Ω—Ç(–æ–≤) ‚Ä¢ {totalSizeMB} –ú–ë</div>
                {files.map((f) => (
                  <div key={f.name} className="file-row">
                    <div className="file-meta">
                      <span className="file-icon">üìÑ</span>
                      <div>
                        <div className="file-name">{f.name}</div>
                        <div className="file-size">{(f.size / BYTES_IN_MB).toFixed(2)} –ú–ë</div>
                      </div>
                    </div>
                    <button className="icon-button" onClick={() => removeFile(f.name)} aria-label="–£–¥–∞–ª–∏—Ç—å">‚úï</button>
                  </div>
                ))}
              </div>
            )}

            {!!errors.length && (
              <div className="error">
                {errors.map((e, i) => <div key={i}>{e}</div>)}
              </div>
            )}
          </div>
          <div className="right">
            <div className="checks-panel">
              <div className="panel-title">–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏</div>
              <ul>
                <li>–ì–û–°–¢ 2.301-6 ‚Äî —Ñ–æ—Ä–º–∞—Ç—ã –∏ —Ä–∞–º–∫–∏</li>
                <li>–ì–û–°–¢ –† 2.105-2019 ‚Äî –æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º</li>
                <li>–ì–û–°–¢ –† 21.101 ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</li>
                <li>–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Ññ 87 ‚Äî —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–µ–∫—Ç–∞</li>
              </ul>
            </div>
          </div>
        </div>
        <div className="modal-footer">
          <button className="primary-button" disabled={!files.length || uploading} onClick={startUpload}>
            {uploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default NewCheckModal;


